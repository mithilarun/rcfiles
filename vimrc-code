set nocompatible
" Vundle specific config
" BEGIN
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('<SOME PATH HERE>')

" Let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'

" Add all plugins here
Plugin 'tmhedberg/SimpylFold'
Plugin 'vim-scripts/indentpython.vim'
"Bundle 'Valloric/YouCompleteMe'
Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'jnurmine/Zenburn'
Plugin 'kien/ctrlp.vim'
Plugin 'tpope/vim-fugitive'
Bundle 'chase/vim-ansible-yaml'

call vundle#end()

filetype indent plugin on
syntax on
set hidden
set wildmenu
set showcmd
set hlsearch
set incsearch
set ignorecase
set smartcase
set backspace=indent,eol,start
set autoindent
set nostartofline
set ruler
set laststatus=2
set confirm
set visualbell
set t_vb=
set cmdheight=2
set notimeout ttimeout ttimeoutlen=200
set pastetoggle=<F11>
set number
map Y y$
nnoremap <C-L> :nohl<CR><C-L>
colorscheme zenburn
filetype indent on
set scrolloff=10
" Plugin to highlight the trailing spaces
highlight RedundantWhitespace ctermbg=red guibg=red
match RedundantWhitespace /\s\+$\| \+\ze\t/

let python_highlight_all=1

" Code folding
set foldenable
set foldlevelstart=10
set foldnestmax=10
set foldmethod=indent

:if &diff
   map n ]c
   map N [c
   map = :diffget^M
:endif

" Specific settings for Python files
autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4 tabstop=4 textwidth=79 autoindent fileformat=unix

" Specific settings for YAML files
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab


" YouCompleteMe customizations
"let g:ycm_autoclose_preview_window_after_completion=1
"map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>

" Virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF

" Use ack to search for stuff
set grepprg=ack\ -a

" Store all swap files in one place
set directory^=$HOME/.vim/tmp//
